{
	"head": {
		"id": "jentis.core.jtm.plugin.backend.facebook",
		"logo": {
			"l": "/logo/l.png",
			"m": "/logo/m.png",
			"s": "/logo/s.png",
			"icon": false
		},
		"name": "META Pixel & CAPI",
		"type": "plugin",
		"terms": "",
		"author": "JENTIS GmbH",
		"version": "2.2.1",
		"morelink": "my.jentis.com/jtm/backendplugin/facebook",
		"description": "META Analytics plugin",
		"publishdate": "05.05.2021",
		"release_log": {
			"2.1.9": {
				"description": "Refactor groups of placeholders",
				"classification": "normal"
			},
			"2.2.0": {
				"description": "Logo Changed to the new one called \"META\"; pixel renamed  to \"META Pixel & CAPI\"; Removed all the \"Client- or Server-side\" prefixes from the template labels.",
				"classification": "normal"
			},
			"2.2.1": {
				"description": "Changed Vendor Name to be correct",
				"classification": "normal"
			},
			"2.1.10": {
				"description": "fb_pixel_id on frontend updated",
				"classification": "normal"
			},
			"2.1.11": {
				"description": "fb_pixel_id updated on every tag, constant changeable value (placeholder written on general section)",
				"classification": "normal"
			},
			"2.1.12": {
				"description": "Activate  Essential Mode",
				"classification": "normal"
			},
			"2.1.13": {
				"description": "Configured optional placeholders correctly for the JTM Display",
				"classification": "normal"
			},
			"2.1.14": {
				"description": "Improve description of constants\r\nMake Graph API version optional\r\nAdd defalt values where suitable",
				"classification": "normal"
			}
		},
		"dependencies": {
			"jentis.core.jtm.plugin.trigger.order": "2.0.2",
			"jentis.core.jtm.plugin.trigger.search": "2.0.1",
			"jentis.core.jtm.plugin.variable.cookies": "2.0.0",
			"jentis.core.jtm.plugin.trigger.addtocart": "2.0.1",
			"jentis.core.jtm.plugin.variable.currency": "2.0.2",
			"jentis.core.jtm.plugin.variable.order_id": "2.0.8",
			"jentis.core.jtm.plugin.trigger.productlist": "2.0.1",
			"jentis.core.jtm.plugin.trigger.productview": "2.0.1",
			"jentis.core.jtm.plugin.variable.event_time": "2.0.1",
			"jentis.core.jtm.plugin.variable.product_id": "2.0.7",
			"jentis.core.jtm.plugin.variable.breadcrumbs": "2.0.3",
			"jentis.core.jtm.plugin.variable.fb_click_id": "2.1.1",
			"jentis.core.jtm.plugin.variable.fb_event_id": "2.0.4",
			"jentis.core.jtm.plugin.variable.search_term": "2.0.4",
			"jentis.core.jtm.plugin.variable.user_doc_id": "2.0.6",
			"jentis.core.jtm.plugin.variable.order_brutto": "2.0.7",
			"jentis.core.jtm.plugin.variable.product_type": "2.0.3",
			"jentis.core.jtm.plugin.variable.fb_browser_id": "2.1.2",
			"jentis.core.jtm.plugin.variable.product_price": "2.0.10",
			"jentis.core.jtm.plugin.variable.fb_external_id": "2.0.4",
			"jentis.core.jtm.plugin.trigger.initiatecheckout": "2.0.0",
			"jentis.core.jtm.plugin.variable.product_quantity": "2.0.9",
			"jentis.core.jtm.plugin.trigger.fb_triggerpiiemail": "2.0.0",
			"jentis.core.jtm.plugin.variable.client_ip_address": "2.0.3",
			"jentis.core.jtm.plugin.variable.addtocart_sumbrutto": "2.0.9",
			"jentis.core.jtm.plugin.variable.checkout_itemscount": "2.0.4",
			"jentis.core.jtm.plugin.variable.navigator_useragent": "2.0.1",
			"jentis.core.jtm.plugin.variable.search_countresults": "2.0.4",
			"jentis.core.jtm.plugin.variable.window_location_href": "2.0.2",
			"jentis.core.jtm.plugin.trigger.pageview_without_exclude": "2.0.0"
		}
	},
	"plugin": {
		"plugin-slot": "jentis.core.jtm.plugin.addbackend"
	},
	"backend": {
		"method": "post",
		"template": {
			"lead": {
				"desc": "When a sign up is completed.\nA person clicks on pricing.",
				"label": "Lead",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Lead\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"custom": {
				"desc": "Custom Event - CAPI",
				"label": "Custom Event - CAPI",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>{{event_name}}\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"event_name": {
						"desc": "Please define here the name of the custom event.",
						"name": "Event Name [event_name]",
						"group": "",
						"value": "",
						"optional": false
					},
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"donate": {
				"desc": "When a person donates funds to your organization or cause.\nA person adds a donation to the Humane Society to their cart.",
				"label": "Donate",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Donate\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"search": {
				"desc": "When a search is made. A person searches for a product on your website.",
				"label": "Search",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Search\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"search_string\":\"((search_term))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|search|t|5|}}",
				"placeholder": {
					"value": {
						"desc": "Input here the search query of the user.",
						"name": "Search Countresults [value]",
						"group": "Search - Event",
						"value": "{{|search_countresults|v|113|}}",
						"optional": true
					},
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "search",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"search_term": {
						"desc": "Input here the search query of the user.",
						"name": "Search Term [search_string]",
						"group": "Search - Event",
						"value": "{{|search_term|v|105|}}",
						"optional": true
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "search",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"contact": {
				"desc": "When a person initiates contact with your business via telephone, SMS, email, chat, etc.\nA person submits a question about a product.",
				"label": "Contact",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Contact\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"pageview": {
				"desc": "Sending a Pageview for Facebook Analytics",
				"label": "Pageview",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>PageView\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|pageview_without_exclude|t|51|}}",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"purchase": {
				"desc": "When a purchase is made or checkout flow is completed.",
				"label": "Purchase",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Purchase\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"order_id\":\"((order_id))\">><<,\"delivery_category\":\"((order_delivery_category))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|order|t|27|}}",
				"placeholder": {
					"value": {
						"desc": "Insert here the value of the transaction/order. f.e. the brutto value of the order",
						"name": "Order Value [value]",
						"group": "Order - Event",
						"value": "{{|order_brutto|v|121|}}",
						"optional": true
					},
					"order_id": {
						"desc": "Insert here your ID of the transaction/order.",
						"name": "Order-ID [order_id]",
						"group": "Order - Event",
						"value": "{{|order_id|v|115|}}",
						"optional": true
					},
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "order",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "order",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					},
					"order_delivery_category": {
						"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
						"name": "Delivery category [delivery_category]",
						"group": "Order - Event",
						"value": "",
						"optional": true
					}
				},
				"no_consent_mode": true
			},
			"schedule": {
				"desc": "The booking of an appointment to visit one of your locations.",
				"label": "Schedule",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Schedule\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"addtocart": {
				"desc": "When a product is added to the shopping cart. A person clicks on an add to cart button.",
				"label": "AddToCart",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>AddToCart\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|addtocart|t|9|}}",
				"placeholder": {
					"value": {
						"desc": "Value added to the cart.",
						"name": "AddToCart Value [value]",
						"group": "Add-To-Cart - Event",
						"value": "{{|addtocart_sumbrutto|v|111|}}",
						"optional": true
					},
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "addtocart",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "addtocart",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"subscribe": {
				"desc": "When a person applies to a start a paid subscription for a product or service you offer.\nA person subscribes to your payloading service.",
				"label": "Subscribe",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>Subscribe\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"starttrial": {
				"desc": "When a person starts a free trial of a product or service you offer.\nA person selects a free week of your game.",
				"label": "StartTrial",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>StartTrial\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"viewcontent": {
				"desc": "A visit to a web page you care about. ViewContent tells you if someone visits a web page URL, but not what they see or do on that page.\nA person lands on a product details page.",
				"label": "ViewContent",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>ViewContent\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|productView|t|21|}}",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "productview",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "productview",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"findlocation": {
				"desc": "When a person searches for a location of your store via a website or app, with an intention to visit the physical location.\nA person wants to find a specific product in a local store.",
				"label": "FindLocation",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>FindLocation\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"addtowishlist": {
				"desc": "When a product is added to a wishlist. A person clicks on an add to wishlist button.",
				"label": "AddToWishlist",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>AddToWishlist\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "addtowishlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "addtowishlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"addpaymentinfo": {
				"desc": "When payment information is added in the checkout flow.",
				"label": "AddPaymentInfo",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>AddPaymentInfo\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"jentispiiemail": {
				"desc": "gathering a hashed email for Facebook Analytics",
				"label": "Jentis PII E-Mail",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>J-PII-Email\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((fb_emStorage))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\" },\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|fb_triggerPIIEmail|t|73|}}",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"fb_emStorage": {
						"name": "Email",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"viewcontentlist": {
				"desc": "A visit to a web page you care about. ViewContentList tells you if someone visits a web page URL, but not what they see or do on that page.\nA person lands on a product details page.",
				"label": "ViewContentList",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>ViewContent\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "{{|productlist|t|3|}}",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "productlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "productlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"customizeproduct": {
				"desc": "When a person customizes a product.\nA person selects the color of a t-shirt..",
				"label": "CustomizeProduct",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>CustomizeProduct\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"initiatecheckout": {
				"desc": "When a person enters the checkout flow prior to completing the checkout flow.\nA person clicks on a checkout button.",
				"label": "InitiateCheckout",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>InitiateCheckout\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"num_items\":\"((checkout_itemsCount))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]} } ] }",
				"trigger": "{{|initiatecheckout|t|31|}}",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "checkout",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "checkout",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					},
					"checkout_itemsCount": {
						"desc": "Number of items when checkout was initiated.",
						"name": "Number of Items [num_items]",
						"group": "Checkout - Event",
						"value": "{{|checkout_itemscount|v|109|}}",
						"optional": true
					}
				},
				"no_consent_mode": true
			},
			"submitapplication": {
				"desc": "When a person applies for a product, service, or program you offer.\nA person applies for a credit card, educational program, or job.",
				"label": "SubmitApplication",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>SubmitApplication\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					}
				},
				"no_consent_mode": true
			},
			"completeregistration": {
				"desc": "When a registration form is completed.\nA person submits a completed subscription or signup form.",
				"label": "CompleteRegistration",
				"sender": true,
				"payload": "\"data\":[{\"event_name\":\"<<((fb_eventname_prefix))>>CompleteRegistration\",\"event_time\":\"{{event_time}}\",\"event_id\":\"{{fb_event_id}}\",\"event_source_url\":\"{{window_location_href}}\",\"action_source\":\"{{action_source}}\",<<\"opt_out\":\"((opt_out))\",>>\"user_data\":{ <<\"em\":\"((em))\",>><<\"ph\":\"((ph))\",>><<\"ge\":\"((ge))\",>><<\"db\":\"((db))\",>><<\"ln\":\"((ln))\",>><<\"fn\":\"((fn))\",>><<\"ct\":\"((ct))\",>><<\"st\":\"((st))\",>><<\"zp\":\"((zp))\",>><<\"country\":\"((country))\",>><<\"subscription_id\":\"((subscription_id))\",>><<\"lead_id\":\"((lead_id))\",>><<\"fb_login_id\":\"((fb_login_id))\",>><<\"external_id\":\"((fb_external_id))\",>><<\"fbc\":\"((fbc))\",>><<\"fbp\":\"((fbp))\",>>\"client_ip_address\":\"{{client_ip_address}}\",\"client_user_agent\":\"{{client_user_agent}}\"},\"custom_data\":{ \"jentis\":\"true\"{{customdataparameters}}<<,\"content_category\":\"((content_category))\">><<,\"content_name\":\"((content_name))\">><<,\"currency\":\"((currency))\">><<,\"predicted_ltv\":\"((predicted_ltv))\">><<,\"value\":\"((value))\">><<,\"status\":\"((registration_status))\">><<,\"content_type\":\"((content_type))\">>,\"content_ids\":[{{products_id}}],\"contents\":[{{products_info}}]}}]}",
				"trigger": "",
				"placeholder": {
					"products_id": {
						"name": "Product-IDs",
						"type": "arraylist",
						"group": "Collection of Product-IDs",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_id}}\"{{product_id}}\"{{arraylist:products_id}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "",
						"optional": true
					},
					"products_info": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"options": {
							"separator": ","
						},
						"payload": "{{arraylist:products_info}}{\"id\":\"{{product_id}}\"<<,\"quantity\":\"((product_quantity))\">><<,\"item_price\":\"((product_price))\">><<,\"delivery_category\":\"((delivery_category))\">>}{{arraylist:products_info}}",
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_price": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|71|}}",
								"optional": true
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|69|}}",
								"optional": true
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": true
							}
						}
					},
					"registration_status": {
						"desc": "The status of the registration event as a string. f.e. registered",
						"name": "Registration Status [status]",
						"group": "Registration Complete - Event",
						"value": "",
						"optional": true
					}
				},
				"no_consent_mode": true
			}
		},
		"basicstream": "https://graph.facebook.com/{{api_version}}/{{fb_pixel_id}}/events?access_token={{fb_access_token}}<<&test_event_code=((fb_test_event_code))>>",
		"placeholder": {
			"bd": {
				"desc": "The format should be JJJJMMTT. Month & Day must be with leading zero! f.e. 20220105",
				"hash": true,
				"name": "Birthday [db]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ct": {
				"desc": "The format should be only small letters! f.e. newyork, london, paris",
				"hash": true,
				"name": "City [ct]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"em": {
				"desc": "Remove all spaces at the beginning and end and transform all letters into small letters!",
				"hash": true,
				"name": "E-Mail [em]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"fn": {
				"desc": "The format should be only small letters! f.e. mary",
				"hash": true,
				"name": "Firstname [fn]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ge": {
				"desc": "Only a small letter is allowed! Decide between f (female) and m (male)",
				"hash": true,
				"name": "Gender [ge]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ln": {
				"desc": "The format should be only small letters! f.e. mary",
				"hash": true,
				"name": "Lastname [ln]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ph": {
				"desc": "Remove all symbols, letters and leading zeros! f.e. 4369912345678",
				"hash": true,
				"name": "Phone Number [ph]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"st": {
				"desc": "",
				"hash": true,
				"name": "State [st]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"zp": {
				"desc": "Use small letters without spaces/dashes!",
				"hash": true,
				"name": "Zip [zp]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"fbc": {
				"name": "Facebook Click-ID [fbc]",
				"group": "Customer Information Parameters",
				"value": "{{|fb_click_id|v|101|}}",
				"optional": true
			},
			"fbp": {
				"name": "Facebook Browser-ID [fbp]",
				"group": "Customer Information Parameters",
				"value": "{{|fb_browser_id|v|103|}}",
				"optional": true
			},
			"value": {
				"desc": "The value of a user performing this event to the business.",
				"name": "Value [value]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"cookies": {
				"name": "Client-Cookies",
				"group": "Server-Event Parameters",
				"value": "{{|cookies|v|267|}}",
				"optional": false
			},
			"country": {
				"desc": "Use the ISO 3166-1 Alpha-2 standard! f.e. us",
				"hash": true,
				"name": "Country [country]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"lead_id": {
				"desc": "The ID associated with a lead generated by Meta's Lead Ads.",
				"name": "Lead ID [lead_id]",
				"value": "",
				"optional": true
			},
			"opt_out": {
				"desc": "A flag that indicates we should not use this event for ads delivery optimization. If set to true, we only use the event for attribution. (true/false)",
				"name": "Opt out [opt_out]",
				"group": "Server-Event Parameters",
				"value": "",
				"optional": true
			},
			"currency": {
				"desc": "Currency must be a valid ISO 4217 three-digit currency code.",
				"name": "Currency [currency]",
				"group": "Customer Information Parameters",
				"value": "{{|currency|v|48|}}",
				"optional": true
			},
			"event_time": {
				"desc": "UNIX-Timestamp in seconds when the event happened.",
				"name": "Event Timestamp [event_time]",
				"group": "Server-Event Parameters",
				"value": "{{|event_time|v|96|}}",
				"optional": false
			},
			"api_version": {
				"name": "API-Version",
				"group": "Server-Event Parameters",
				"value": "{{api_version}}",
				"optional": false
			},
			"fb_event_id": {
				"desc": "Random-ID per Event used for deduplication between client and serverside.",
				"name": "Event-ID [event_id]",
				"group": "Server-Event Parameters",
				"value": "{{|fb_event_id|v|442|}}",
				"optional": false
			},
			"fb_login_id": {
				"desc": "ID issued by Facebook when a person first logs into an instance of an app. This is also known as App-Scoped ID.",
				"hash": false,
				"name": "Facebook Login-ID [fb_login_id]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"fb_pixel_id": {
				"name": "Facebook Pixel-ID",
				"group": "Server-Event Parameters",
				"value": "{{fb_pixel_id}}",
				"optional": false
			},
			"content_name": {
				"desc": "The name of the content associated with the event. ",
				"name": "Content name [content_name]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"action_source": {
				"desc": "This field allows you to specify where your conversions occurred.",
				"name": "Action source [action_source]",
				"group": "Server-Event Parameters",
				"value": "website",
				"optional": false
			},
			"predicted_ltv": {
				"desc": "Predicted lifetime value of a subscriber as defined by the advertiser and expressed as an exact value.",
				"name": "Predicted lifetime value [predicted_ltv]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"fb_external_id": {
				"desc": "First-Party-Data identifier. f.e. the JENTIS User-ID",
				"name": "External ID [external_id]",
				"group": "Customer Information Parameters",
				"value": "{{|fb_external_id|v|464|}}",
				"optional": true
			},
			"fb_access_token": {
				"name": "Facebook Access-Token",
				"group": "Server-Event Parameters",
				"value": "{{fb_access_token}}",
				"optional": false
			},
			"subscription_id": {
				"desc": "The subscription ID for the user in this transaction. This is similar to the order ID for an individual product. Example: anid1234.",
				"hash": false,
				"name": "Subscription ID [subscription_id]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"content_category": {
				"desc": "The category of the content associated with the event. Example: 'grocery'.",
				"name": "Content category [content_category]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"client_ip_address": {
				"desc": "The IP-Address of the client.",
				"name": "Client IP-Address [client_ip_address]",
				"group": "Customer Information Parameters",
				"value": "{{|client_ip_address|v|12|}}",
				"optional": false
			},
			"client_user_agent": {
				"desc": "The User-Agent of the client.",
				"name": "Client User-Agent [client_user_agent]",
				"group": "Customer Information Parameters",
				"value": "{{|navigator_useragent|v|16|}}",
				"optional": false
			},
			"fb_test_event_code": {
				"name": "Test Event Code (USE ONLY IN PREVIEW MODE)",
				"group": "Server-Event Parameters",
				"value": "{{fb_test_event_code}}",
				"optional": true
			},
			"fb_eventname_prefix": {
				"desc": "The value entered here will be prepended on all event-names.",
				"name": "Prefix of Event names",
				"value": "{{fb_eventname_prefix}}",
				"optional": true
			},
			"customdataparameters": {
				"desc": "Custom Data Parameters",
				"name": "Custom Data Parameters",
				"type": "guilist",
				"group": "Data Parameters",
				"entries": {
					"customparameter": {
						"desc": "Custom parameter",
						"name": "Custom parameter key"
					},
					"customparametervalue": {
						"desc": "Value of the custom parameter.",
						"name": "Custom parameter value"
					}
				},
				"payload": "{{guilist:customdataparameters}},\"{{customparameter}}\":\"{{customparametervalue}}\"{{guilist:customdataparameters}}"
			},
			"window_location_href": {
				"name": "Event Source URL [event_source_url]",
				"group": "Server-Event Parameters",
				"value": "{{|window_location_href|v|18|}}",
				"optional": false
			}
		},
		"basicpayload": "{\"partner_agent\": \"pljentis-1.2\",",
		"basichttpheader": ""
	},
	"frontend": {
		"lib": "(!code:start)
                   function(context) {
                       this.jtsTracker = context.jtsTracker;
                       this.oGateConfig = context.config;
                       this.currency = "";
                       if (
                           typeof context.accountvars !== "undefined" &&
                           typeof context.accountvars.currency !== "undefined"
                       ) {
                           this.currency = context.accountvars.currency;
                       }
                   
                       this.getUserID = function() {
                           var iUserID = this.jtsTracker.readDocumentID('user');
                   
                           if (iUserID === null) {
                               iUserID = this.jtsTracker.createDocumentID('user');
                           }
                           return iUserID;
                       }
                   
                       this.trackFrontendInitEvent = function(context) {
                           var iUserID = context.placeholder["fb_external_id"];
                   
                           if (iUserID !== false) {
                               var url = "https://www.facebook.com/tr/?";
                   
                               // Pixel-ID
                               url += "id=" + this.oGateConfig["fb_pixel_id"];
                   
                               // Event
                               url += "&ev=JentisInitial";
                   
                               // Document Location
                               url += "&dl=" + encodeURIComponent(document.location.href);
                   
                               // Document Referrer
                               url += "&rl=" + encodeURIComponent(document.referrer);
                   
                               // ???
                               url += "&if=false";
                   
                               // Timestamp
                               url += "&ts=" + Date.now();
                   
                               // Screen Width (active)
                               url += "&sw=" + (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth);
                   
                               // Screen Height (active)
                               url += "&sh=" + (window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight);
                   
                               // Version
                               url += "&v=2.9.39";
                   
                               url += "&external_id=" + this.sha256(iUserID);
                   
                               // REST
                               url += "&r=stable&ec=0&o=30&it=" + Date.now() + "&coo=false&tm=1&rqm=GET&partner_agent=pljentis-1.2";
                   
                               // FBP
                               var fbp = this.jtsTracker.getValueOfFrontendVariable('fb_browser_id');
                               url += "&fbp=" + fbp;
                   
                               var fbc = this.jtsTracker.getValueOfFrontendVariable('fb_click_id');
                   
                   
                               if (fbc !== "" && typeof fbc !== "undefined") {
                                   url += "&fbc=" + fbc;
                               }
                   
                               var img = new Image();
                               img.src = url;
                           }
                       }
                   
                       this.bLibraryLoaded = false;
                       this.init = function() {
                           if (this.bLibraryLoaded === false) {
                               this.loadLibrary();
                               this.bLibraryLoaded = true;
                           }
                       }
                   
                       this.loadLibrary = function() {
                           ! function(f, b, e, v, n, t, s) {
                               if (f.fbq) return;
                               n = f.fbq = function() {
                                   n.callMethod ? n.callMethod.apply(n, arguments) : n.queue.push(arguments)
                               };
                               if (!f._fbq) f._fbq = n;
                               n.push = n;
                               n.loaded = !0;
                               n.version = '2.0';
                               n.queue = [];
                               t = b.createElement(e);
                               t.async = !0;
                               t.src = v;
                               s = b.getElementsByTagName(e)[0];
                               s.parentNode.insertBefore(t, s)
                           }(window, document, 'script', '//connect.facebook.net/en_US/fbevents.js');
                   
                           if (typeof fbq !== 'undefined') {
                               fbq.disablePushState = true; //disable of sending pageViews automatically for SPA
                           }
                   
                       }
                   
                       this.sendPixel = function(oEvent, oArgs) {
                           var oUserData = oArgs["oUserData"];
                           var oCustomData = oArgs["guilist"];
                   
                           if (typeof oEvent.parameters === "undefined") {
                               oEvent.parameters = {};
                           }
                   
                           var bADE = this.oGateConfig["fb_bautomaticdataextraction"];
                   
                           if (typeof bADE !== "undefined" && bADE === "1") {
                               fbq('set', 'autoConfig', false, this.oGateConfig["fb_pixel_id"]);
                           }
                   
                           var oInit = {};
                           for (var udata in oUserData) {
                               if (
                                   typeof oUserData[udata] !== 'undefined' &&
                                   oUserData[udata] !== null &&
                                   oUserData[udata] !== ""
                               ) {
                                   oInit[udata] = oUserData[udata];
                               }
                           }
                   
                           // Must be initialized everytime to update the User-Data Info
                           fbq('init', this.oGateConfig["fb_pixel_id"], oInit);
                   
                           if (typeof oArgs["fb_eventname_prefix"] === "string") {
                               oEvent.event = oArgs["fb_eventname_prefix"] + oEvent.event;
                           }
                   
                           oEvent.eventid = {
                               "eventID": oArgs["fb_event_id"],
                           };
                   
                           oEvent.parameters.currency = oArgs["fe_currency"] || this.currency;
                   
                           if (typeof oArgs["value"] !== "undefined" && oArgs["value"] !== "") {
                               oEvent["parameters"]["value"] = oArgs["value"];
                           }
                   
                           if (typeof oArgs["predicted_ltv"] !== "undefined" && oArgs["predicted_ltv"] !== "") {
                               oEvent["parameters"]["predicted_ltv"] = oArgs["predicted_ltv"];
                           }
                   
                           if (typeof oArgs["content_category"] !== "undefined" && oArgs["content_category"] !== "") {
                               oEvent["parameters"]["content_category"] = oArgs["content_category"];
                           }
                   
                           if (typeof oArgs["content_name"] !== "undefined" && oArgs["content_name"] !== "") {
                               oEvent["parameters"]["content_name"] = oArgs["content_name"];
                           }
                   
                           if (typeof oArgs["content_type"] !== "undefined" && oArgs["content_type"] !== "") {
                               oEvent["parameters"]["content_type"] = oArgs["content_type"];
                           }
                   
                           // Product Section
                           var aProductIDs = ((typeof oArgs.product_ids === "object") ? oArgs.product_ids : []);
                           var aContents = this.getContents(oArgs.product_ids, oArgs.product_quantity, oArgs.product_brutto, oArgs.delivery_category, oArgs.product_data);
                   
                           oEvent.parameters.content_ids = aProductIDs;
                           oEvent.parameters.contents = aContents;
                   
                           var oParams = {};
                           if (typeof oEvent['parameters'] !== "undefined") {
                               oParams = oEvent['parameters'];
                           }
                           oParams["jentis"] = "true";
                   
                           if (
                               typeof oCustomData !== "undefined" &&
                               oCustomData !== null &&
                               Object.keys(oCustomData).length > 0
                           ) {
                   
                               var sKey = "";
                               var sValue = "";
                   
                               for (var propz in oCustomData) {
                                   sKey = oCustomData[propz].customparameter;
                                   sValue = oCustomData[propz].customparametervalue;
                                   oParams[sKey] = sValue;
                               }
                           }
                   
                           if (
                               typeof oArgs['custom_product_data_outside_array'] !== "undefined" &&
                               oArgs['custom_product_data_outside_array'] !== null &&
                               typeof oArgs['custom_product_data_outside_array'].productcustomdataparametersoutsidearray !== "undefined" &&
                               oArgs['custom_product_data_outside_array'].productcustomdataparametersoutsidearray !== null &&
                               Object.keys(oArgs['custom_product_data_outside_array'].productcustomdataparametersoutsidearray).length > 0
                           ) {
                               var sKey = "";
                               var sValue = "";
                   
                               for (var propz in oArgs['custom_product_data_outside_array'].productcustomdataparametersoutsidearray) {
                                   sKey = oArgs['custom_product_data_outside_array'].productcustomdataparametersoutsidearray[propz].customparameter;
                                   sValue = oArgs['custom_product_data_outside_array'].productcustomdataparametersoutsidearray[propz].customparametervalue;
                                   oParams[sKey] = sValue;
                               }
                           }
                   
                           var oEventID = {};
                           if (typeof oEvent['eventid'] !== "undefined") {
                               oEventID = oEvent['eventid'];
                           }
                   
                           fbq('trackSingle', this.oGateConfig["fb_pixel_id"], oEvent.event, oParams, oEventID);
                           this.init();
                       }
                   
                   
                       this.trackAddPaymentInfo = function(oArgs) {
                           this.sendPixel({
                               "event": "AddPaymentInfo",
                           }, oArgs);
                       }
                   
                       this.trackAddToCart = function(oArgs) {
                           this.sendPixel({
                               "event": "AddToCart"
                           }, oArgs);
                       };
                   
                       this.trackAddToWishList = function(oArgs) {
                           this.sendPixel({
                               "event": "AddToWishList"
                           }, oArgs);
                       };
                   
                       this.trackCompleteRegistration = function(oArgs) {
                           var oCompleteRegistration = {
                               "event": "CompleteRegistration",
                               "parameters": {}
                           };
                   
                           if (typeof oArgs["status"] !== "undefined") {
                               oCompleteRegistration["parameters"]["status"] = oArgs["status"];
                           }
                   
                           this.sendPixel(oCompleteRegistration, oArgs);
                       };
                   
                       this.trackContact = function(oArgs) {
                           this.sendPixel({
                               "event": "Contact"
                           }, oArgs);
                       };
                   
                       this.trackCustomizeProduct = function(oArgs) {
                           this.sendPixel({
                               "event": "CustomizeProduct"
                           }, oArgs);
                       };
                   
                       this.trackDonate = function(oArgs) {
                           this.sendPixel({
                               "event": "Donate",
                           }, oArgs);
                       };
                   
                       this.trackFindLocation = function(oArgs) {
                           this.sendPixel({
                               "event": "FindLocation"
                           }, oArgs);
                       };
                   
                       this.trackInitiateCheckout = function(oArgs) {
                           var oCheckout = {
                               "event": "InitiateCheckout",
                               "parameters": {}
                           };
                   
                           if (typeof oArgs["num_items"] !== "undefined") {
                               oCheckout["parameters"]["num_items"] = oArgs["num_items"];
                           }
                   
                           this.sendPixel(oCheckout, oArgs);
                       }
                   
                       this.trackLead = function(oArgs) {
                           this.sendPixel({
                               "event": "Lead"
                           }, oArgs);
                       };
                   
                       this.trackCustom = function(oArgs) {
                   
                           var eventName = "";
                   
                           if (
                               typeof oArgs["fb_eventname"] !== "undefined" && oArgs["fb_eventname"] !== null
                           ) {
                               eventName = oArgs["fb_eventname"];
                           }
                   
                           this.sendPixel({
                               "event": eventName
                           }, oArgs);
                       };
                   
                       this.trackPII = function(oArgs) {
                           this.sendPixel({
                               "event": "J-PII-Email"
                           }, oArgs);
                       };
                   
                       this.trackPageView = function(oArgs) {
                   
                           if (
                               typeof this.oGateConfig["fb_bPIITracking"] !== "undefined" &&
                               this.oGateConfig["fb_bPIITracking"] === '1'
                           ) {
                               if (document.readyState == "loading") {
                                   (function(scope) {
                                       document.addEventListener('DOMContentLoaded', function() {
                                           scope.initPIIListener(scope);
                                       });
                                   })(this);
                               } else {
                                   this.initPIIListener(this);
                               }
                           }
                   
                           var oPageview = {
                               "event": "PageView",
                               "parameters": {}
                           };
                   
                           if (typeof oArgs["breadcrumbs"] === "object" && Object.prototype.toString.call(oArgs["breadcrumbs"]) === '[object Array]' && oArgs["breadcrumbs"].length > 0) {
                               oPageview["parameters"]["breadcrumbs"] = oArgs["breadcrumbs"].join("|");
                           } else if (typeof oArgs["breadcrumbs"] === "string" && oArgs["breadcrumbs"].length > 0) {
                               oPageview["parameters"]["breadcrumbs"] = oArgs["breadcrumbs"];
                           }
                   
                           this.sendPixel(oPageview, oArgs);
                       };
                   
                       this.trackPurchase = function(oArgs) {
                           var oSale = {
                               "event": "Purchase",
                               "parameters": {}
                           };
                   
                           if (typeof oArgs["order_id"] !== "undefined") {
                               oSale["parameters"]["order_id"] = oArgs["order_id"];
                           }
                   
                           if (typeof oArgs["order_delivery_category"] === "string" && oArgs["order_delivery_category"].length > 0) {
                               oSale["parameters"]["delivery_category"] = oArgs["order_delivery_category"];
                           }
                   
                           this.sendPixel(oSale, oArgs);
                       };
                   
                       this.trackSchedule = function(oArgs) {
                           this.sendPixel({
                               "event": "Schedule"
                           }, oArgs);
                       };
                   
                       this.trackSearch = function(oArgs) {
                           var oSearch = {
                               "event": "Search",
                               "parameters": {}
                           };
                   
                           if (typeof oArgs["search_string"] !== "undefined") {
                               oSearch["parameters"]["search_string"] = oArgs["search_string"];
                           }
                   
                           this.sendPixel(oSearch, oArgs);
                       };
                   
                       this.trackStartTrial = function(oArgs) {
                           this.sendPixel({
                               "event": "StartTrial"
                           }, oArgs);
                       };
                   
                       this.trackSubmitApplication = function(oArgs) {
                           this.sendPixel({
                               "event": "SubmitApplication"
                           }, oArgs);
                       };
                   
                       this.trackSubscribe = function(oArgs) {
                           this.sendPixel({
                               "event": "Subscribe",
                           }, oArgs);
                       };
                   
                       this.trackViewContent = function(oArgs) {
                           this.sendPixel({
                               "event": "ViewContent",
                           }, oArgs);
                       };
                   
                       this.trackProductList = function(oArgs) {
                           this.sendPixel({
                               "event": "ViewContent"
                           }, oArgs);
                       };
                   
                   
                       //helpers
                       this.initPIIListener = function(scope) {
                           var aNodeList = document.querySelectorAll("input");
                           for (var i = 0; i < aNodeList.length; i++) {
                               aNodeList[i].addEventListener("blur", function() {
                                   if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(this.value)) {
                                       _jts.push({
                                           "track": "event",
                                           "tool": "fb",
                                           "em": scope.sha256(this.value)
                                       });
                                   }
                               });
                           }
                       }
                       this.sha256 = function(input) {
                           function a(a) {
                               var b = "",
                                   c = void 0,
                                   d;
                               for (var e = 0; e < a.length; e++)
                                   c = a.charCodeAt(e),
                                   d = e + 1 < a.length ? a.charCodeAt(e + 1) : 0,
                                   c >= 55296 && c <= 56319 && d >= 56320 && d <= 57343 && (c = 65536 + ((c & 1023) << 10) + (d & 1023),
                                       e++),
                                   c <= 127 ? b += String.fromCharCode(c) : c <= 2047 ? b += String.fromCharCode(192 | c >>> 6 & 31, 128 | c & 63) : c <= 65535 ? b += String.fromCharCode(224 | c >>> 12 & 15, 128 | c >>> 6 & 63, 128 | c & 63) : c <= 2097151 && (b += String.fromCharCode(240 | c >>> 18 & 7, 128 | c >>> 12 & 63, 128 | c >>> 6 & 63, 128 | c & 63));
                               return b
                           }
                   
                           function b(a, b) {
                               return b >>> a | b << 32 - a
                           }
                   
                           function c(a, b, c) {
                               return a & b ^ ~a & c
                           }
                   
                           function d(a, b, c) {
                               return a & b ^ a & c ^ b & c
                           }
                   
                           function f(a) {
                               return b(2, a) ^ b(13, a) ^ b(22, a)
                           }
                   
                           function g(a) {
                               return b(6, a) ^ b(11, a) ^ b(25, a)
                           }
                   
                           function h(a) {
                               return b(7, a) ^ b(18, a) ^ a >>> 3
                           }
                   
                           function i(a) {
                               return b(17, a) ^ b(19, a) ^ a >>> 10
                           }
                   
                           function j(a, b) {
                               return a[b & 15] += i(a[b + 14 & 15]) + a[b + 9 & 15] + h(a[b + 1 & 15])
                           }
                   
                           var k = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298],
                               l = new Array(8),
                               m = new Array(2),
                               n = new Array(64),
                               o = new Array(16),
                               p = "0123456789abcdef";
                   
                           function q(a, b) {
                               var c = (a & 65535) + (b & 65535);
                               a = (a >> 16) + (b >> 16) + (c >> 16);
                               return a << 16 | c & 65535
                           }
                   
                           function r() {
                               m[0] = m[1] = 0,
                                   l[0] = 1779033703,
                                   l[1] = 3144134277,
                                   l[2] = 1013904242,
                                   l[3] = 2773480762,
                                   l[4] = 1359893119,
                                   l[5] = 2600822924,
                                   l[6] = 528734635,
                                   l[7] = 1541459225
                           }
                   
                           function s() {
                               var a = void 0,
                                   b = void 0,
                                   e = void 0,
                                   h = void 0,
                                   i = void 0,
                                   m = void 0,
                                   p = void 0,
                                   r = void 0,
                                   s = void 0,
                                   t = void 0;
                               e = l[0];
                               h = l[1];
                               i = l[2];
                               m = l[3];
                               p = l[4];
                               r = l[5];
                               s = l[6];
                               t = l[7];
                               for (var u = 0; u < 16; u++)
                                   o[u] = n[(u << 2) + 3] | n[(u << 2) + 2] << 8 | n[(u << 2) + 1] << 16 | n[u << 2] << 24;
                               for (var u = 0; u < 64; u++)
                                   a = t + g(p) + c(p, r, s) + k[u],
                                   u < 16 ? a += o[u] : a += j(o, u),
                                   b = f(e) + d(e, h, i),
                                   t = s,
                                   s = r,
                                   r = p,
                                   p = q(m, a),
                                   m = i,
                                   i = h,
                                   h = e,
                                   e = q(a, b);
                               l[0] += e;
                               l[1] += h;
                               l[2] += i;
                               l[3] += m;
                               l[4] += p;
                               l[5] += r;
                               l[6] += s;
                               l[7] += t
                           }
                   
                           function t(a, b) {
                               var c = void 0,
                                   d, e = 0;
                               d = m[0] >> 3 & 63;
                               var f = b & 63;
                               (m[0] += b << 3) < b << 3 && m[1]++;
                               m[1] += b >> 29;
                               for (c = 0; c + 63 < b; c += 64) {
                                   for (var g = d; g < 64; g++)
                                       n[g] = a.charCodeAt(e++);
                                   s();
                                   d = 0
                               }
                               for (var g = 0; g < f; g++)
                                   n[g] = a.charCodeAt(e++)
                           }
                   
                           function u() {
                               var a = m[0] >> 3 & 63;
                               n[a++] = 128;
                               if (a <= 56)
                                   for (var b = a; b < 56; b++)
                                       n[b] = 0;
                               else {
                                   for (var b = a; b < 64; b++)
                                       n[b] = 0;
                                   s();
                                   for (var a = 0; a < 56; a++)
                                       n[a] = 0
                               }
                               n[56] = m[1] >>> 24 & 255;
                               n[57] = m[1] >>> 16 & 255;
                               n[58] = m[1] >>> 8 & 255;
                               n[59] = m[1] & 255;
                               n[60] = m[0] >>> 24 & 255;
                               n[61] = m[0] >>> 16 & 255;
                               n[62] = m[0] >>> 8 & 255;
                               n[63] = m[0] & 255;
                               s()
                           }
                   
                           function v() {
                               var a = "";
                               for (var b = 0; b < 8; b++)
                                   for (var c = 28; c >= 0; c -= 4)
                                       a += p.charAt(l[b] >>> c & 15);
                               return a
                           }
                   
                           function w(a) {
                               var b = 0;
                               for (var c = 0; c < 8; c++)
                                   for (var d = 28; d >= 0; d -= 4)
                                       a[b++] = p.charCodeAt(l[c] >>> d & 15)
                           }
                   
                           function x(a, b) {
                               r();
                               t(a, a.length);
                               u();
                               if (b)
                                   w(b);
                               else
                                   return v()
                           }
                   
                           function y(b) {
                               var c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0,
                                   d = arguments[2];
                               if (b === null || b === void 0)
                                   return null;
                               var e = b;
                               c && (e = a(b));
                               return x(e, d)
                           }
                   
                           return x(input, undefined);
                       }
                   
                       this.getContents = function(aProductIDs, aProductQuantity, aProductBrutto, aProductDeliveryCategory, oCustomProductData) {
                           var aContents = []
                   
                           if (typeof aProductIDs === "object" && Object.prototype.toString.call(aProductIDs) === '[object Array]') {
                               for (var i = 0; i < aProductIDs.length; i++) {
                                   var obj = {};
                                   if (typeof aProductIDs[i] !== "undefined") {
                                       obj["id"] = aProductIDs[i].toString();
                                   }
                   
                                   if (typeof aProductQuantity === "object" && Object.prototype.toString.call(aProductQuantity) === '[object Array]' && typeof aProductQuantity[i] !== "undefined") {
                                       obj["quantity"] = aProductQuantity[i].toString();
                                   } else if (typeof aProductQuantity === "string" && aProductQuantity.length > 0) {
                                       obj["quantity"] = aProductQuantity;
                                   }
                   
                                   if (typeof aProductBrutto === "object" && Object.prototype.toString.call(aProductBrutto) === '[object Array]' && typeof aProductBrutto[i] !== "undefined") {
                                       obj["item_price"] = aProductBrutto[i].toString();
                                   } else if (typeof aProductBrutto === "string" && aProductBrutto.length > 0) {
                                       obj["item_price"] = aProductBrutto;
                                   }
                   
                                   if (typeof aProductDeliveryCategory === "object" && Object.prototype.toString.call(aProductDeliveryCategory) === '[object Array]' && typeof aProductDeliveryCategory[i] !== "undefined") {
                                       obj["delivery_category"] = aProductDeliveryCategory[i].toString();
                                   } else if (typeof aProductDeliveryCategory === "string" && aProductDeliveryCategory.length > 0) {
                                       obj["delivery_category"] = aProductDeliveryCategory;
                                   }
                   
                                   if (typeof oCustomProductData !== "undefined") {
                                       for (var data in oCustomProductData) {
                                           if (typeof oCustomProductData[data]["customparametervalue"] === "object" && Object.prototype.toString.call(oCustomProductData[data]["customparametervalue"]) === '[object Array]' && typeof oCustomProductData[data]["customparametervalue"][i] !== "undefined") {
                                               obj[oCustomProductData[data]["customparameter"]] = oCustomProductData[data]["customparametervalue"][i].toString();
                                           } else if (typeof oCustomProductData[data]["customparametervalue"] === "string" && oCustomProductData[data]["customparametervalue"].length > 0) {
                                               obj[oCustomProductData[data]["customparameter"]] = oCustomProductData[data]["customparametervalue"].toString();
                                           }
                                       }
                                   }
                   
                                   aContents.push(obj);
                               }
                           } else {
                               if (typeof aProductIDs === "string" && aProductIDs.length === 0) {
                                   throw new TypeError("Product-ID must be of type array!");
                               }
                   
                   
                           }
                   
                           return aContents;
                       }
                   
                       this.init();
                   }
                   (!code:end)",
		"template": {
			"lead_frontend": {
				"desc": "When a sign up is completed.\nA person clicks on pricing.",
				"label": "lead",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackLead({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      });
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"custom_frontend": {
				"desc": "Custom Event (Client)",
				"label": "Custom Event",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackCustom({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_eventname: funcContext.placeholder['event_name'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      });
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"event_name": {
						"desc": "Please define here the name of the custom event.",
						"name": "Event Name [event_name]",
						"group": "",
						"value": "",
						"optional": false
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"donate_frontend": {
				"desc": "When a person donates funds to your organization or cause.\nA person adds a donation to the Humane Society to their cart.",
				"label": "donate",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackDonate({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"search_frontend": {
				"desc": "Tag associated with a search.",
				"label": "search",
				"sender": true,
				"trigger": "{{|search|t|5|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackSearch({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          search_string: funcContext.placeholder['search_term'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"value": {
						"desc": "Input here the search query of the user.",
						"name": "Search Countresults [value]",
						"group": "Search - Event",
						"value": "{{|search_countresults|v|113|}}",
						"optional": true
					},
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "search",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"search_term": {
						"desc": "Input here the search query of the user.",
						"name": "Search Termin [search_string]",
						"group": "Search - Event",
						"value": "{{|search_term|v|105|}}",
						"optional": true
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "search",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"contact_frontend": {
				"desc": "When a person initiates contact with your business via telephone, SMS, email, chat, etc.\nA person submits a question about a product.",
				"label": "contact",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackContact({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      });
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"pageview_frontend": {
				"desc": "Tag associated with a pageview.",
				"label": "pageview",
				"sender": true,
				"trigger": "{{|pageview_without_exclude|t|51|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackPageView({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          breadcrumbs: funcContext.placeholder['breadcrumbs'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      });
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"breadcrumbs": {
						"desc": "Enter here in a string format the breadcrumbs of your current page.",
						"name": "Breadcrumbs [breadcrumbs]",
						"group": "Pageview - Event",
						"value": "{{|breadcrumbs|v|417|}}",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"purchase_frontend": {
				"desc": "Tag associated with a sale.",
				"label": "purchase",
				"sender": true,
				"trigger": "{{|order|t|27|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackPurchase({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          value: funcContext.placeholder['value'],
                                          order_id: funcContext.placeholder['order_id'],
                                          order_delivery_category: funcContext.placeholder["order_delivery_category"],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"value": {
						"desc": "Insert here the value of the transaction/order. f.e. the brutto value of the order",
						"name": "Order Value [value]",
						"group": "Order - Event",
						"value": "{{|order_brutto|v|121|}}",
						"optional": false
					},
					"order_id": {
						"desc": "Insert here your ID of the transaction/order.",
						"name": "Order-ID [order_id]",
						"group": "Order - Event",
						"value": "{{|order_id|v|115|}}",
						"optional": true
					},
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "order",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"order_delivery_category": {
						"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
						"name": "Delivery category [delivery_category]",
						"group": "Order - Event",
						"value": "",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "order",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"schedule_frontend": {
				"desc": "The booking of an appointment to visit one of your locations.",
				"label": "schedule",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackSchedule({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"addtocart_frontend": {
				"desc": "Tag associated with a addtocart event.",
				"label": "addtocart",
				"sender": true,
				"trigger": "{{|addtocart|t|9|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackAddToCart({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"value": {
						"desc": "Value added to the cart.",
						"name": "AddToCart Value [value]",
						"group": "Add-To-Cart - Event",
						"value": "{{|addtocart_sumbrutto|v|111|}}",
						"optional": true
					},
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "addtocart",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "addtocart",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"frontendInitEvenet": {
				"desc": "Use this tag only, if you do not want to use the full redundant setup.",
				"label": "InitEvent",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackFrontendInitEvent(funcContext);
                                  }
                                  (!code:end)",
				"placeholder": {}
			},
			"subscribe_frontend": {
				"desc": "When a person applies to a start a paid subscription for a product or service you offer.\nA person subscribes to your payloading service.",
				"label": "subscribe",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackSubscribe({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"starttrail_frontend": {
				"desc": "When a person starts a free trial of a product or service you offer.\nA person selects a free week of your game.",
				"label": "starttrail",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackStartTrial({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"viewContent_frontend": {
				"desc": "Tag associated with a productview.",
				"label": "viewContent",
				"sender": true,
				"trigger": "{{|productView|t|21|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackViewContent({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      });
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "productview",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"findlocation_frontend": {
				"desc": "When a person searches for a location of your store via a website or app, with an intention to visit the physical location.\nA person wants to find a specific product in a local store.",
				"label": "findlocation",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackFindLocation({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"addtowishlist_frontend": {
				"desc": "When a product is added to a wishlist. A person clicks on an add to wishlist button.",
				"label": "addtowishlist",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackAddToWishList({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "addtowishlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "addtowishlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"addpaymentinfo_frontend": {
				"desc": "When payment information is added in the checkout flow.",
				"label": "addpaymentinfo",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackAddPaymentInfo({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"jentispiiemail_frontend": {
				"desc": "Gathering a hashed email for Facebook Analytics.",
				"label": "Jentis PII E-Mail",
				"sender": true,
				"trigger": "{{|fb_triggerPIIEmail|t|73|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackPII({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"viewContentList_frontend": {
				"desc": "Tag associated with a viewContentList.",
				"label": "viewContentList",
				"sender": true,
				"trigger": "{{|productlist|t|3|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackProductList({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "productlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "productlist",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"customizeproduct_frontend": {
				"desc": "When a person customizes a product.\nA person selects the color of a t-shirt..",
				"label": "customizeproduct",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackCustomizeProduct({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"initiateCheckout_frontend": {
				"desc": "Tag associated with a initiateCheckout.",
				"label": "initiateCheckout",
				"sender": true,
				"trigger": "{{|initiatecheckout|t|31|}}",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackInitiateCheckout({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          num_items: funcContext.placeholder['checkout_itemsCount'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "checkout",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"content_type": {
						"desc": "Should be set to product or product_group. (Only if you track products in this event)",
						"name": "Content type [content_type]",
						"group": "Data Parameters",
						"value": "product",
						"optional": true
					},
					"checkout_itemsCount": {
						"desc": "Number of items when checkout was initiated.",
						"name": "Number of Items [num_items]",
						"group": "Checkout - Event",
						"value": "{{|checkout_itemscount|v|109|}}",
						"optional": true
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "checkout",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"submitapplication_frontend": {
				"desc": "When a person applies for a product, service, or program you offer.\nA person applies for a credit card, educational program, or job.",
				"label": "submitapplication",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackSubmitApplication({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			},
			"completeregistration_frontend": {
				"desc": "When a registration form is completed.\nA person submits a completed subscription or signup form.",
				"label": "completeregistration",
				"sender": true,
				"trigger": "",
				"frontendjs": "(!code:start)
                                  function(funcContext) {
                                      this.trackCompleteRegistration({
                                          fb_pixel_id: funcContext.placeholder['fb_pixel_id'],
                                          fb_event_id: funcContext.placeholder['fb_event_id'],
                                          value: funcContext.placeholder['value'],
                                          content_name: funcContext.placeholder['content_name'],
                                          content_category: funcContext.placeholder['content_category'],
                                          content_type: funcContext.placeholder['content_type'],
                                          fb_eventname_prefix: funcContext.placeholder['fb_eventname_prefix'],
                                          guilist: funcContext.placeholder["customdataparameters"],
                                          product_data: funcContext.placeholder['products']['customdataparameters_product'],
                                          product_ids: funcContext.placeholder['products']['product_id'],
                                          product_quantity: funcContext.placeholder['products']['product_quantity'],
                                          product_brutto: funcContext.placeholder['products']['product_brutto'],
                                          delivery_category: funcContext.placeholder['products']['delivery_category'],
                                          fe_currency: funcContext.placeholder["fe_currency"],
                                          predicted_ltv: funcContext.placeholder['predicted_ltv'],
                                          custom_product_data_outside_array: funcContext.placeholder['custom_product_data_outside_array'],
                                          status: funcContext.placeholder['status'],
                                          oUserData: {
                                              external_id: funcContext.placeholder["fb_external_id"],
                                              country: funcContext.placeholder["country"],
                                              em: funcContext.placeholder["em"],
                                              fn: funcContext.placeholder["fn"],
                                              ln: funcContext.placeholder["ln"],
                                              ph: funcContext.placeholder["ph"],
                                              ge: funcContext.placeholder["ge"],
                                              db: funcContext.placeholder["db"],
                                              ct: funcContext.placeholder["ct"],
                                              st: funcContext.placeholder["st"],
                                              zp: funcContext.placeholder["zp"]
                                          }
                                      })
                                  }
                                  (!code:end)",
				"placeholder": {
					"status": {
						"desc": "The status of the registration event as a string. f.e. registered",
						"name": "Registration Status [status]",
						"group": "Registration Complete - Event",
						"value": "",
						"optional": true
					},
					"products": {
						"name": "Product Informations",
						"type": "arraylist",
						"group": "Collection of Product Information",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"product_id": {
								"name": "Product ID [id]",
								"value": "{{|product_id|v|67|}}",
								"optional": false
							},
							"product_brutto": {
								"name": "Product Price [item_price]",
								"value": "{{|product_price|v|758|}}",
								"optional": false
							},
							"product_quantity": {
								"name": "Product Quantity [quantity]",
								"value": "{{|product_quantity|v|757|}}",
								"optional": false
							},
							"delivery_category": {
								"desc": "The delivery category of the content associated with the event. Example: in_store, curbside, home_delivery.",
								"name": "Delivery category [delivery_category]",
								"value": "",
								"optional": false
							},
							"customdataparameters_product": {
								"desc": "Custom Product Data Parameters",
								"name": "Custom Product Data Parameters",
								"type": "guilist",
								"group": "Collection of Product Information",
								"stream": "{{guilist:list}}{{guilist:list}}",
								"entries": {
									"customparameter": {
										"desc": "Key of the custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					},
					"custom_product_data_outside_array": {
						"name": "Add Product Information outside contents-array",
						"type": "arraylist",
						"group": "Add Product Information outside contents-array",
						"filter": {
							"value": "",
							"operator": "eq",
							"variable": "{{|product_type|v|440|}}"
						},
						"placeholder": {
							"productcustomdataparametersoutsidearray": {
								"desc": "Custom Data Parameters",
								"name": "Custom Data Parameters",
								"type": "guilist",
								"group": "Add Product Information outside contents-array",
								"entries": {
									"customparameter": {
										"desc": "Custom parameter",
										"name": "Custom parameter key"
									},
									"customparametervalue": {
										"desc": "Value of the custom parameter.",
										"name": "Custom parameter value"
									}
								}
							}
						}
					}
				}
			}
		},
		"placeholder": {
			"ct": {
				"desc": "The format should be only small letters! f.e. newyork, london, paris",
				"name": "City [ct]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"db": {
				"desc": "The format should be JJJJMMTT. Month & Day must be with leading zero! f.e. 20220105",
				"name": "Birthday [db]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"em": {
				"desc": "Remove all spaces at the beginning and end and transform all letters into small letters!",
				"name": "E-Mail [em]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"fn": {
				"desc": "The format should be only small letters! f.e. mary",
				"name": "Firstname [fn]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ge": {
				"desc": "Only a small letter is allowed! Decide between f (female) and m (male)",
				"name": "Gender [ge]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ln": {
				"desc": "The format should be only small letters! f.e. mary",
				"name": "Lastname [ln]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"ph": {
				"desc": "Remove all symbols, letters and leading zeros! f.e. 4369912345678",
				"name": "Phone Number [ph]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"st": {
				"desc": "",
				"name": "State [st]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"zp": {
				"desc": "Use small letters without spaces/dashes!",
				"name": "Zip [zp]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"value": {
				"desc": "The value of a user performing this event to the business.",
				"name": "Value [value]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"country": {
				"desc": "Use the ISO 3166-1 Alpha-2 standard! f.e. us",
				"name": "Country [country]",
				"group": "Customer Information Parameters",
				"value": "",
				"optional": true
			},
			"fb_event_id": {
				"desc": "Random-ID per Event used for deduplication between client and serverside.",
				"name": "Event-ID [event_id]",
				"group": "Server-Event Parameters",
				"value": "{{|fb_event_id|v|442|}}",
				"optional": false
			},
			"fb_pixel_id": {
				"name": "Facebook Pixel-ID",
				"group": "Frontend-Event Parameters",
				"value": "{{fb_pixel_id}}",
				"optional": false
			},
			"fe_currency": {
				"desc": "Currency must be a valid ISO 4217 three-digit currency code.",
				"name": "Currency [currency]",
				"group": "Customer Information Parameters",
				"value": "{{|currency|v|48|}}",
				"optional": true
			},
			"content_name": {
				"desc": "The name of the content associated with the event. ",
				"name": "Content name [content_name]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"content_type": {
				"desc": "Should be set to product or product_group. (Only if you track products in this event)",
				"name": "Content type [content_type]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"predicted_ltv": {
				"desc": "Predicted lifetime value of a subscriber as defined by the advertiser and expressed as an exact value.",
				"name": "Predicted lifetime value [predicted_ltv]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"fb_external_id": {
				"desc": "First-Party-Data identifier. f.e. the JENTIS User-ID",
				"name": "External ID [external_id]",
				"group": "Customer Information Parameters",
				"value": "{{|user_doc_id|v|99|}}",
				"optional": false
			},
			"content_category": {
				"desc": "The category of the content associated with the event. Example: 'grocery'.",
				"name": "Content category [content_category]",
				"group": "Data Parameters",
				"value": "",
				"optional": true
			},
			"fb_eventname_prefix": {
				"desc": "The value entered here will be prepended on all event-names.",
				"name": "Prefix of Event names",
				"value": "{{fb_eventname_prefix}}",
				"optional": true
			},
			"customdataparameters": {
				"desc": "customdataparameters",
				"name": "Custom Data Parameters",
				"type": "guilist",
				"stream": "{{guilist:list}}{{guilist:list}}",
				"entries": {
					"customparameter": {
						"desc": "Custom parameter(is_user_admin, for example)",
						"name": "Custom parameter key"
					},
					"customparametervalue": {
						"desc": "Value of the custom parameter.",
						"name": "Custom parameter value"
					}
				}
			}
		}
	},
	"constants": {
		"api_version": {
			"desc": "Defining Graph API version. It is bound to your Facebook CAPI and can be retrieved from Facebook Business Manager. Latest Graph API version is: v17.0, introduced: May 23, 2023.",
			"name": "Graph API version",
			"type": "TEXT",
			"value": "v17.0",
			"optional": true
		},
		"fb_pixel_id": {
			"desc": "Pixel ID is your account recognition for Facebook ads. By adding your pixel ID, Facebook can track relevant audiences for brand advertisements.",
			"name": "Facebook Pixel ID",
			"type": "TEXT",
			"value": "",
			"optional": false
		},
		"fb_access_token": {
			"desc": "An access token is an opaque string that identifies a user, app, or Page and can be used by the app to make graph API calls. When someone connects with an app using Facebook Login and approves the request for permissions, the app obtains an access token that provides temporary, secure access to Facebook APIs. Access tokens are obtained via a number of methods. Access token required to use Conversions API. You can get an access token using the Events Manager (recommended) or the Business Manager if you already have your own app for Conversions API.",
			"name": "Facebook Access Token",
			"type": "TEXT",
			"value": "",
			"optional": false
		},
		"fb_bpiitracking": {
			"desc": "Flag to activate the tracking of personally identifiable information (Contact Information). Valid values: 0 or 1",
			"name": "Enable PII-Tracking",
			"type": "TEXT",
			"value": "0",
			"optional": true
		},
		"fb_test_event_code": {
			"desc": "Use this code to test your server events in the Test Events feature in Events Manager. CAUTION! It should be empty string in Live mode, otherwise events will not be counted!",
			"name": "Test event code (USE ONLY IN PREVIEW MODE)",
			"type": "TEXT",
			"value": "",
			"optional": true
		},
		"fb_eventname_prefix": {
			"desc": "You may insert a prefix, which will be added before every standard event name like PageView, ViewContent, Purchase and more. Prefix + Event Name, example output: JENTIS-PageView. CAUTION! It will create new records in Facebook Business Manager, since the Event name changes.",
			"name": "Event name prefix",
			"type": "TEXT",
			"value": "",
			"optional": true
		},
		"fb_bautomaticdataextraction": {
			"desc": "Flag to activate automatic data extraction. Valid values: 0 or 1",
			"name": "Enable automatic data extraction",
			"type": "TEXT",
			"value": "0",
			"optional": true
		}
	},
	"cmp-vendor": {
		"vendor": {
			"id": "facebook",
			"zip": "94025",
			"name": "META",
			"street": "Menlo Park, California",
			"country": {
				"iso": "US",
				"name": "United States"
			}
		},
		"category": {
			"id": "marketing",
			"name": "Marketing"
		},
		"deniable": true,
		"purposes": [
			{
				"id": "store-device",
				"name": "Store and/or access information on a device"
			},
			{
				"id": "create-ads",
				"name": "Create a personalised ads profile2.0.61"
			},
			{
				"id": "select-pers-ads",
				"name": "Select personalised ads2.0.71"
			},
			{
				"id": "security",
				"name": "Ensure security, prevent fraud, and debug"
			},
			{
				"id": "tech-deliver",
				"name": "Technically deliver ads or content"
			},
			{
				"id": "link-devices",
				"name": "Link different devices"
			}
		],
		"description": "Analyzes the user behaviour on the website. This allows to measure  and optimize the effectiveness of ads as well as improved user retargeting.",
		"justification": {
			"id": "consent",
			"name": "Consent"
		},
		"no_consent_mode": true
	}
}